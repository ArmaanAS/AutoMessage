package com.dash.utils;

import com.dash.message.AutoMessage;
import com.dash.message.MessageSet;
import com.dash.message.condition.Condition;
import com.dash.message.condition.Condition.InvalidPresetException;
import com.dash.message.condition.Condition.ReplaceIncompatibleException;
import com.dash.message.condition.Condition.SyntaxException;

import eu.the5zig.mod.The5zigAPI;

public class ConfigParser {
	private static String name = The5zigAPI.getAPI().getGameProfile().getName();
	
	public static AutoMessage compile(String line, boolean debug) throws SyntaxException, ReplaceIncompatibleException, InvalidPresetException {
//		System.out.println("Checking format of line...");
		if (!isLineFormatCorrect(line)) {
			Debug.chatError("Incorrect line format: " + line);
			throw new SyntaxException("Incorrect format: " + line);
		} 
//		System.out.println("Format is correct.");
//		else {
//			Debug.chatSuccess("Line format correct: " + line);
//		}
//		System.out.println(line);
		String[] s = split(line);
//		Debug.chatDebug(s[1]);	
//		System.out.println(s[0]);
//		System.out.println(s[1]);
		MessageSet messages = new MessageSet(splitMessages(s[0]));
//		System.out.println("Compiling messages and conditions...");
		return new AutoMessage(
				messages,//.print(), 
				Condition.compile(s[1], debug)//.print()
		);
	}
	
	public static AutoMessage compile(String line) throws SyntaxException, ReplaceIncompatibleException, InvalidPresetException {
		return compile(line, false);
	}
	
	public static boolean isLineFormatCorrect(String line) {
		return line.matches("\\s*([@#!]?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"\\s*,?\\s*)+\\s*:((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*((\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*))*)");
//		return line.matches("(?i)\\s*([@#!]?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"\\s*,?\\s*)+\\s*:((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*((\\s*(not\\s*)*(\\(\\s*\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)\\s*\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])\\s*))*\\s*)");
//		return line.matches("(?i)\\s*([@#!]?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"\\s*,?\\s*)+\\s*:(\\s*(not\\s*)*(\\((\\s*.*?\\s*)*?\\)|\\$?\"(.*?[^\\\\])\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*.*?\\s*)*?\\)|\\$?\"((?:(?!\")[^\\\\]|(?:\\\\\\\\)*\\\\[^\\\\])*)\"|\\[\\s*\\w+\\s*\\])))*\\s*");
//		return line.matches("(?i)([@#!]?\"(\\\\?.)*?\"\\s*,?\\s*)+\\s*:(\\s*(not\\s*)*(\\((\\s*.*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*)((\\s*(and|or)\\s*)(\\s*(not\\s*)*(\\((\\s*.*\\s*)*?\\)|\\$?\"(\\\\?.)*?\"|\\[\\s*\\w+\\s*\\])\\s*))+");
//		return line.matches("(?i)([@#!]?\\\"(\\\\?.)*?\\\"\\s*,?\\s*)+\\s*:\\s*((\\s*(not\\s*)*(\\((\\s*.*\\s*)*?\\)|\\$?\\\"(\\\\?.)*?\\\"|\\[\\s*\\w+\\s*\\])\\s*)(\\s*(and|or)\\s*\\g<4>)*)");
	}
	
	private static String[] split(String s) {		
		return s
			.split("//")[0]
			.trim() // .replaceAll("(^\\s*)|(\\s*$)", "")
			.replaceAll("(?i)<NAME>", name)
			.replace("\\n", "\n")
			.replace("\\t", "\t")
			.split("(?<=\")\\s*:\\s*(?=\\$?\"|\\[|\\(|not)", 2);
	}

	
	private static String[] splitMessages(String s) {
		return s.split("(?<=\")\\s*,\\s*(?=[\"#@!])");
	}
}
